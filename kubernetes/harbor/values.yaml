harbor:
  expose:
    type: ingress
    tls:
      enabled: true
      secretName: "harbor-tls"
    ingress:
      hosts:
        core: core.harbor.domain
        notary: notary.harbor.domain
      controller: nginx
  #    annotations:
  #      ingress.kubernetes.io/ssl-redirect: "true"
  #      ingress.kubernetes.io/proxy-body-size: "0"
  #      nginx.ingress.kubernetes.io/ssl-redirect: "true"
  #      nginx.ingress.kubernetes.io/proxy-body-size: "0"


  imagePullPolicy: Always


  logLevel: debug

  # The initial password of Harbor admin. Change it from portal after launching Harbor
  harborAdminPassword: "Harbor12345"
  # The secret key used for encryption. Must be a string of 16 chars.
  secretKey: "not-a-secure-key"

  persistentVolumeClaim:
      registry:
        # Use the existing PVC which must be created manually before bound,
        # and specify the "subPath" if the PVC is shared with other components
        existingClaim: ""
        # Specify the "storageClass" used to provision the volume. Or the default
        # StorageClass will be used(the default).
        # Set it to "-" to disable dynamic provisioning
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 500Mi
      chartmuseum:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 100Mi
      jobservice:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 50Mi
      # If external database is used, the following settings for database will
      # be ignored
      database:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 50Mi
      # If external Redis is used, the following settings for Redis will
      # be ignored
      redis:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 50Mi



  # If expose the service via "ingress", the Nginx will not be used
  nginx:
    image:
      repository: goharbor/nginx-photon
      tag: v1.10.2
    replicas: 1
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
    ## Additional deployment annotations
    podAnnotations: {}

  portal:
    image:
      repository: goharbor/harbor-portal
      tag: v1.10.2
    replicas: 1
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
    ## Additional deployment annotations
    podAnnotations: {}

  core:
    image:
      repository: goharbor/harbor-core
      tag: v1.10.2
    replicas: 1
    ## Liveness probe values
    livenessProbe:
      initialDelaySeconds: 300
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
    ## Additional deployment annotations
    podAnnotations: {}
    # Secret is used when core server communicates with other components.
    # If a secret key is not specified, Helm will generate one.
    # Must be a string of 16 chars.
    secret: ""
    # Fill the name of a kubernetes secret if you want to use your own
    # TLS certificate and private key for token encryption/decryption.
    # The secret must contain keys named:
    # "tls.crt" - the certificate
    # "tls.key" - the private key
    # The default key pair will be used if it isn't set
    secretName: ""
    # The XSRF key. Will be generated automatically if it isn't specified
    xsrfKey: ""

  jobservice:
    image:
      repository: goharbor/harbor-jobservice
      tag: v1.10.2
    replicas: 1
    maxJobWorkers: 10
    # The logger for jobs: "file", "database" or "stdout"
    jobLogger: file
  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
    ## Additional deployment annotations
    podAnnotations: {}
    # Secret is used when job service communicates with other components.
    # If a secret key is not specified, Helm will generate one.
    # Must be a string of 16 chars.
    secret: ""

  registry:
    registry:
      image:
        repository: goharbor/registry-photon
        tag: v1.10.2

      # resources:
      #  requests:
      #    memory: 256Mi
      #    cpu: 100m
    controller:
      image:
        repository: goharbor/harbor-registryctl
        tag: v1.10.2

      # resources:
      #  requests:
      #    memory: 256Mi
      #    cpu: 100m
    replicas: 1

  chartmuseum:
    enabled: true
    # Harbor defaults ChartMuseum to returning relative urls, if you want using absolute url you should enable it by change the following value to 'true'
    absoluteUrl: false
    image:
      repository: goharbor/chartmuseum-photon
      tag: v1.10.2
    replicas: 1
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
    ## Additional deployment annotations
    podAnnotations: {}

  clair:
    enabled: false

  notary:
    enabled: false

  database:
    # if external database is used, set "type" to "external"
    # and fill the connection informations in "external" section
    type: internal
    internal:
      image:
        repository: goharbor/harbor-db
        tag: v1.10.2
      # the image used by the init container
      initContainerImage:
        repository: busybox
        tag: latest
      # The initial superuser password for internal database
      password: "changeit"
      # resources:
      #  requests:
      #    memory: 256Mi
      #    cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}

  redis:
    # if external Redis is used, set "type" to "external"
    # and fill the connection informations in "external" section
    type: internal
    internal:
      image:
        repository: goharbor/redis-photon
        tag: v1.10.2
      # resources:
      #  requests:
      #    memory: 256Mi
      #    cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}