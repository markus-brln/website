
ollama:
  replicaCount: 1

  image:
    repository: ollama/ollama
    pullPolicy: IfNotPresent
    tag: ""

  # Ollama parameters
  ollama:
    gpu:
      # -- Enable GPU integration
      enabled: false

      # -- GPU type: 'nvidia' or 'amd'
      # If 'ollama.gpu.enabled', default value is nvidia
      # If set to 'amd', this will add 'rocm' suffix to image tag if 'image.tag' is not override
      # This is due cause AMD and CPU/CUDA are different images
      type: 'nvidia'

      # -- Specify the number of GPU
      # If you use MIG section below then this parameter is ignored
      number: 1

      # -- only for nvidia cards; change to (example) 'nvidia.com/mig-1g.10gb' to use MIG slice
      nvidiaResource: "nvidia.com/gpu"
      # nvidiaResource: "nvidia.com/mig-1g.10gb" # example
      # If you want to use more than one NVIDIA MIG you can use the following syntax (then nvidiaResource is ignored and only the configuration in the following MIG section is used)

      mig:
        # -- Enable multiple mig devices
        # If enabled you will have to specify the mig devices
        # If enabled is set to false this section is ignored
        enabled: false

        # -- Specify the mig devices and the corresponding number
        devices: {}
            #        1g.10gb: 1
            #        3g.40gb: 1

    models:
      pull:
        - deepseek-r1:1.5b

      run:
        - deepseek-r1:1.5b


  # Service account
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true

    # -- Automatically mount a ServiceAccount's API credentials?
    automount: true

    # -- Annotations to add to the service account
    annotations: {}

    # -- The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Map of annotations to add to the pods
  podAnnotations: {}

  # -- Map of labels to add to the pods
  podLabels: {}

  # -- Pod Security Context
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Container Security Context
  securityContext: {}
    # capabilities:
    #  drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- Specify runtime class
  runtimeClassName: ""

  # Configure Service
  service:

    # -- Service type
    type: ClusterIP

    # -- Service port
    port: 11434

    # -- Service node port when service type is 'NodePort'
    #nodePort: 31434

    # -- Load Balancer IP address
    #loadBalancerIP:

    # -- Annotations to add to the service
    annotations: {}

  # Configure the ingress resource that allows you to access the
  ingress:
    # -- Enable ingress controller resource
    enabled: true

    # -- IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
    className: "nginx"

    # -- Additional annotations for the Ingress resource.
    annotations:
      cert-manager.io/issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/rewrite-target: "/api/generate"
    # The list of hostnames to be covered with this ingress record.
    hosts:
      - host: bauerlein.dev
        paths:
          - path: /chat/api/generate
            pathType: Prefix

    # --  The tls configuration for hostnames to be covered with this ingress record.
    tls:
      - secretName: ollama-tls
        hosts:
          - bauerlein.dev

  # Configure resource requests and limits
  # ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    # -- Pod requests
    requests: {}
      # Memory request
      # memory: 4096Mi

      # CPU request
      # cpu: 2000m

    # -- Pod limit
    limits: {}
      # Memory limit
      # memory: 8192Mi

      # CPU limit
      # cpu: 4000m

  # Configure extra options for liveness probe
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  livenessProbe:
    enabled: true
    path: /
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 20
    successThreshold: 1

  readinessProbe:
    enabled: true
    path: /
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 20
    successThreshold: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  # -- Additional volumes on the output Deployment definition.
  volumes: []
  # -- - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # -- - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # -- Additional arguments on the output Deployment definition.
  extraArgs: []

  # -- Additional environments variables on the output Deployment definition.
  # For extra OLLAMA env, please refer to https://github.com/ollama/ollama/blob/main/envconfig/config.go
  extraEnv: []
  #  - name: OLLAMA_DEBUG
  #    value: "1"

  # -- Additionl environment variables from external sources (like ConfigMap)
  extraEnvFrom: []
  #  - configMapRef:
  #      name: my-env-configmap

  # Enable persistence using Persistent Volume Claims
  # ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  persistentVolume:
    enabled: false
    accessModes:
      - ReadWriteOnce
    annotations: {}
    existingClaim: ""
    size: 7Gi
    storageClass: "microk8s-hostpath"


  # -- Node labels for pod assignment.
  nodeSelector: {}

  # -- Tolerations for pod assignment
  tolerations: []

  # -- Affinity for pod assignment
  affinity: {}

  # -- Lifecycle for pod assignment (override ollama.models startup pull/run)
  lifecycle: {}

  # How to replace existing pods
  updateStrategy:
    # -- Deployment strategy can be "Recreate" or "RollingUpdate". Default is Recreate
    type: "Recreate"

  # -- Topology Spread Constraints for pod assignment
  topologySpreadConstraints: {}

  # -- Init containers to add to the pod
  initContainers: []
  # - name: startup-tool
  #   image: alpine:3
  #   command: [sh, -c]
  #   args:
  #     - echo init

  # -- Use the host’s ipc namespace.
  hostIPC: false

  # -- Use the host’s pid namespace
  hostPID: false

  # -- Use the host's network namespace.
  hostNetwork: false